<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <title>{{ pair }} Detayları</title>
    <style>
        body {
            background-color: #1a1a1a;
            color: #e0e0e0;
            font-family: 'Roboto', sans-serif;
            margin: 0;
            padding: 20px;
        }
        h1 {
            text-align: center;
            color: #ffffff;
        }
        .detail-container {
            width: 80%;
            margin: 20px auto;
            background-color: #2c2c2c;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
        }
        .detail-item {
            margin: 10px 0;
        }
        .detail-item label {
            font-weight: 600;
            color: #ffffff;
        }
        canvas {
            margin-top: 20px;
            max-width: 100%;
        }
        .fibonacci-levels {
            margin-top: 20px;
        }
        .fibonacci-levels h3 {
            color: #ffffff;
        }
        .fibonacci-levels ul {
            list-style: none;
            padding: 0;
        }
        .fibonacci-levels li {
            margin: 5px 0;
        }
        .highlight {
            color: #ffaa00;
            font-weight: bold;
        }
        .timeframe-selector {
            margin-bottom: 20px;
            text-align: center;
        }
        select {
            padding: 5px;
            background-color: #3c3c3c;
            color: #e0e0e0;
            border: 1px solid #555;
            border-radius: 4px;
        }
    </style>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;600&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.2"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-annotation@3.0.1/dist/chartjs-plugin-annotation.min.js"></script>
</head>
<body>
    <h1>{{ pair }} Detayları</h1>
    <div class="detail-container">
        <div class="timeframe-selector">
            <label for="timeframe">Zaman Dilimi: </label>
            <select id="timeframe" onchange="updateTimeframe()">
                <option value="hour" {% if timeframe == 'hour' %}selected{% endif %}>1 Saatlik</option>
                <option value="4hour" {% if timeframe == '4hour' %}selected{% endif %}>4 Saatlik</option>
                <option value="day" {% if timeframe == 'day' %}selected{% endif %}>Günlük</option>
                <option value="week" {% if timeframe == 'week' %}selected{% endif %}>Haftalık</option>
            </select>
        </div>
        <div class="detail-item">
            <label>Güncel Fiyat:</label> {{ current_price }}
        </div>
        <div class="detail-item">
            <label>50 Günlük SMA:</label> {{ sma_50 }}
        </div>
        <div class="detail-item">
            <label>200 Günlük SMA:</label> {{ sma_200 }}
        </div>
        <div class="detail-item">
            <label>Stochastic %K:</label> {{ stoch_k }}
        </div>
        <div class="detail-item">
            <label>Stochastic %D:</label> {{ stoch_d }}
        </div>
        <div class="detail-item">
            <label>ADX:</label> {{ adx }}
        </div>
        <div class="detail-item">
            <label>RSI:</label> {{ rsi }}
        </div>
        <div class="detail-item">
            <label>Son 7 Gün Fiyat Değişimi (%):</label> {{ price_change_7d }}
        </div>
        <div class="fibonacci-levels">
            <h3>Fibonacci Seviyeleri ve Analiz</h3>
            <ul>
                {% for level, data in fibonacci_levels.items %}
                <li {% if level == closest_level %}class="highlight"{% endif %}>
                    {{ level }}: {{ data.value }} 
                    (Reversal: %{{ data.turn_probability }}, 
                    Uptrend: %{{ data.rise_probability }}, 
                    Downtrend: %{{ data.fall_probability }})
                </li>
                {% endfor %}
            </ul>
        </div>
        <canvas id="priceChart" height="200"></canvas>
    </div>
    <script>
        console.log("Historical Prices:", {{ historical_prices|safe }});
        console.log("Fibonacci Levels:", {{ fibonacci_levels|safe }});
        console.log("Current Price:", {{ current_price|safe }});

        const ctx = document.getElementById('priceChart').getContext('2d');
        const prices = {{ historical_prices|safe }};
        const labels = prices.map(p => new Date(p.time * 1000).toLocaleDateString());
        const data = prices.map(p => p.close);
        const fibonacciLevels = {{ fibonacci_levels|safe }};
        const closestLevel = "{{ closest_level }}";
        const currentPrice = {{ current_price|safe }};

        const chart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    label: '{{ pair }} Fiyat Grafiği',
                    data: data,
                    borderColor: '#1e90ff',
                    fill: false,
                }]
            },
            options: {
                scales: {
                    x: { 
                        display: true, 
                        title: { display: true, text: 'Tarih' },
                        padding: { right: 60 }
                    },
                    y: { 
                        display: true, 
                        title: { display: true, text: 'Fiyat' },
                        suggestedMin: fibonacciLevels['0%'].value * 0.95,
                        suggestedMax: fibonacciLevels['100%'].value * 1.05
                    }
                },
                plugins: {
                    annotation: {
                        annotations: [
                            ...Object.entries(fibonacciLevels).map(([level, data], index) => ({
                                type: 'line',
                                yMin: data.value,
                                yMax: data.value,
                                borderColor: level === closestLevel ? '#ff0000' : '#ffaa00',
                                borderWidth: 1,
                                borderDash: [5, 5],
                                label: {
                                    display: true,
                                    content: `${level}: ${data.value} (R: ${data.turn_probability}%, U: ${data.rise_probability}%, D: ${data.fall_probability}%)`,
                                    position: 'right',
                                    yAdjust: -10 * (index - 2.5),
                                    backgroundColor: level === closestLevel ? 'rgba(255, 0, 0, 0.7)' : 'rgba(255, 170, 0, 0.7)',
                                    color: '#ffffff',
                                    font: { size: 10 },
                                    padding: 4
                                }
                            })),
                            {
                                type: 'line',
                                yMin: currentPrice,
                                yMax: currentPrice,
                                borderColor: '#00ff00',
                                borderWidth: 2,
                                borderDash: [],
                                label: {
                                    display: true,
                                    content: `Current: ${currentPrice}`,
                                    position: 'end',
                                    xAdjust: -75,
                                    yAdjust: 5,
                                    backgroundColor: 'rgba(0, 255, 0, 0.7)',
                                    color: '#ffffff',
                                    font: { size: 12 },
                                    padding: 4
                                }
                            }
                        ]
                    }
                }
            }
        });

        function updateTimeframe() {
            const timeframe = document.getElementById('timeframe').value;
            window.location.href = `/pair/{{ pair }}/?timeframe=${timeframe}`;
        }
    </script>
</body>
</html>