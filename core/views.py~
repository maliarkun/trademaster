from django.shortcuts import render
from django.http import JsonResponse
import requests
from .models import TradingPair
from django.core.cache import cache

def get_current_prices(pairs):
    if not pairs:
        return {}
    base_currencies = ','.join([pair.base_currency for pair in pairs])
    quote_currency = pairs[0].quote_currency
    url = f"https://min-api.cryptocompare.com/data/pricemulti?fsyms={base_currencies}&tsyms={quote_currency}"
    response = requests.get(url)
    data = response.json()
    prices = {}
    for pair in pairs:
        base = pair.base_currency
        quote = pair.quote_currency
        price = data.get(base, {}).get(quote, 'Bilinmeyen')
        prices[f"{base}/{quote}"] = price
    return prices

def get_historical_prices(base, quote, timeframe='day', limit=200):
    cache_key = f"historical_{base}_{quote}_{timeframe}_{limit}"
    cached_data = cache.get(cache_key)
    if cached_data is not None:
        print(f"{base}/{quote} için önbellekten veri alındı ({timeframe}).")
        return cached_data
    
    if timeframe == 'hour':
        url = f"https://min-api.cryptocompare.com/data/v2/histohour?fsym={base}&tsym={quote}&limit={limit}"
    elif timeframe == '4hour':
        url = f"https://min-api.cryptocompare.com/data/v2/histohour?fsym={base}&tsym={quote}&limit={limit}&aggregate=4"
    elif timeframe == 'week':
        url = f"https://min-api.cryptocompare.com/data/v2/histoday?fsym={base}&tsym={quote}&limit={limit}&aggregate=7"
    else:  # Varsayılan: günlük
        url = f"https://min-api.cryptocompare.com/data/v2/histoday?fsym={base}&tsym={quote}&limit={limit}"
    
    response = requests.get(url)
    data = response.json()
    if data.get('Response') == 'Success' and 'Data' in data and 'Data' in data['Data']:
        prices = [{'high': float(entry['high']), 'low': float(entry['low']), 'close': float(entry['close']), 'time': entry['time']} for entry in data['Data']['Data']]
        print(f"{base}/{quote} için veri uzunluğu: {len(prices)} ({timeframe})")
        cache.set(cache_key, prices, 300)
        return prices
    else:
        print(f"Hata: {base}/{quote} için veri çekilemedi. Mesaj: {data.get('Message', 'Bilinmeyen hata')}")
        return []

def calculate_sma(prices, period):
    if not prices or len(prices) < period:
        return None
    return sum(price['close'] for price in prices[-period:]) / period

def calculate_stochastic(prices, period=14, smooth_k=3, smooth_d=3):
    if not prices or len(prices) < period + smooth_k + smooth_d - 1:
        return None, None
    recent_prices = prices[-period:]
    highest_high = max(price['high'] for price in recent_prices)
    lowest_low = min(price['low'] for price in recent_prices)
    current_close = prices[-1]['close']
    if highest_high == lowest_low:
        return None, None
    k_value = 100 * (current_close - lowest_low) / (highest_high - lowest_low)
    k_values = []
    for i in range(-(period + smooth_k + smooth_d - 2), 0):
        sub_prices = prices[i - period:i] if i < 0 else prices[-period:]
        if len(sub_prices) < period:
            continue
        high = max(price['high'] for price in sub_prices)
        low = min(price['low'] for price in sub_prices)
        close = sub_prices[-1]['close']
        if high != low:
            k_values.append(100 * (close - low) / (high - low))
    k_smooth = round(sum(k_values[-smooth_k:]) / smooth_k, 2) if len(k_values) >= smooth_k else None
    d_smooth = round(sum(k_values[-smooth_k - smooth_d:-smooth_k]) / smooth_d, 2) if len(k_values) >= smooth_k + smooth_d else None
    return k_smooth, d_smooth


def calculate_di(prices, period=14):
    if not prices or len(prices) < period + 1:
        return None, None
    plus_dms = []
    minus_dms = []
    trs = []
    for i in range(1, len(prices)):
        high = prices[i]['high']
        low = prices[i]['low']
        prev_high = prices[i-1]['high']
        prev_low = prices[i-1]['low']
        prev_close = prices[i-1]['close']
        tr = max(high - low, abs(high - prev_close), abs(low - prev_close))
        plus_dm = high - prev_high if high - prev_high > prev_low - low else 0
        minus_dm = prev_low - low if prev_low - low > high - prev_high else 0
        trs.append(tr)
        plus_dms.append(plus_dm)
        minus_dms.append(minus_dm)
    if not trs:
        return None, None
    atr = sum(trs[-period:]) / period
    plus_di = 100 * (sum(plus_dms[-period:]) / period) / atr if atr else 0
    minus_di = 100 * (sum(minus_dms[-period:]) / period) / atr if atr else 0
    return round(plus_di, 2), round(minus_di, 2)


def calculate_adx(prices, period=14):
    if not prices or len(prices) < period + 1:
        return None
    trs, plus_dms, minus_dms = [], [], []
    for i in range(1, len(prices)):
        high = prices[i]['high']
        low = prices[i]['low']
        prev_high = prices[i-1]['high']
        prev_low = prices[i-1]['low']
        prev_close = prices[i-1]['close']
        tr = max(high - low, abs(high - prev_close), abs(low - prev_close))
        plus_dm = high - prev_high if high - prev_high > prev_low - low else 0
        minus_dm = prev_low - low if prev_low - low > high - prev_high else 0
        trs.append(tr)
        plus_dms.append(plus_dm)
        minus_dms.append(minus_dm)
    if not trs:
        return None
    atr = sum(trs[-period:]) / period
    plus_di = 100 * (sum(plus_dms[-period:]) / period) / atr if atr else 0
    minus_di = 100 * (sum(minus_dms[-period:]) / period) / atr if atr else 0
    dx = 100 * abs(plus_di - minus_di) / (plus_di + minus_di) if plus_di + minus_di else 0
    return round(dx, 2)

def calculate_rsi(prices, period=14):
    if not prices or len(prices) < period + 1:
        return None
    changes = [prices[i]['close'] - prices[i-1]['close'] for i in range(1, len(prices))]
    if len(changes) < period:
        return None
    gains = [chg if chg > 0 else 0 for chg in changes[-period:]]
    losses = [-chg if chg < 0 else 0 for chg in changes[-period:]]
    avg_gain = sum(gains) / period
    avg_loss = sum(losses) / period
    if avg_loss == 0:
        rsi = 100 if avg_gain > 0 else 50
    else:
        rs = avg_gain / avg_loss
        rsi = 100 - (100 / (1 + rs))
    return round(rsi, 2)

    
def trading_pairs(request):
    try:
        # Veritabanından tüm işlem çiftlerini al
        pairs = TradingPair.objects.all()
        
        # Güncel fiyatları al
        current_prices = get_current_prices(pairs)
        price_data = {}
        
        # Her bir işlem çifti için analiz yap
        for pair in pairs:
            key = f"{pair.base_currency}/{pair.quote_currency}"
            
            # Geçmiş fiyat verilerini al
            historical_prices = get_historical_prices(pair.base_currency, pair.quote_currency)
            
            # SMA (Basit Hareketli Ortalama) hesapla
            sma_50 = calculate_sma(historical_prices, 50)
            sma_200 = calculate_sma(historical_prices, 200)
            sma_50_rounded = round(sma_50, 2) if sma_50 else 'Veri Yok'
            sma_200_rounded = round(sma_200, 2) if sma_200 else 'Veri Yok'
            
            # SMA sinyali belirle
            signal = "Belirsiz"
            if sma_50 and sma_200:
                if sma_50 > sma_200:
                    signal = "Golden Cross (Alım)"
                elif sma_50 < sma_200:
                    signal = "Death Cross (Satış)"
            
            # Stochastic göstergesini hesapla
            stoch_k, stoch_d = calculate_stochastic(historical_prices)
            stoch_signal = "Nötr"
            if stoch_k is not None and stoch_d is not None:
                if stoch_k > stoch_d and stoch_k < 20:
                    stoch_signal = "Alım"
                elif stoch_k < stoch_d and stoch_k > 80:
                    stoch_signal = "Satış"
            
            # ADX ve DI değerlerini hesapla
            adx = calculate_adx(historical_prices)
            plus_di, minus_di = calculate_di(historical_prices)
            adx_signal = "Zayıf Trend"
            if adx and adx > 25:
                if plus_di > minus_di:
                    adx_signal = "Güçlü Yükseliş"
                elif plus_di < minus_di:
                    adx_signal = "Güçlü Düşüş"
                else:
                    adx_signal = "Güçlü Trend (Yön Belirsiz)"
            
            # RSI hesapla
            rsi = calculate_rsi(historical_prices)
            rsi_signal = "Nötr"
            if rsi is not None:
                if rsi < 30:
                    rsi_signal = "Aşırı Satım (Alım)"
                elif rsi > 70:
                    rsi_signal = "Aşırı Alım (Satış)"
            
            # Güncel fiyatı al
            current_price = current_prices.get(key, 'Bilinmeyen')
            if current_price == 'Bilinmeyen':
                current_price = float(historical_prices[-1]['close'])
            else:
                current_price = float(current_price)
            
            # Fibonacci seviyelerini hesapla
            highest_high = max(price['high'] for price in historical_prices)
            lowest_low = min(price['low'] for price in historical_prices)
            price_range = highest_high - lowest_low
            fibonacci_levels_raw = {
                '0%': lowest_low,
                '23.6%': lowest_low + 0.236 * price_range,
                '38.2%': lowest_low + 0.382 * price_range,
                '50%': lowest_low + 0.5 * price_range,
                '61.8%': lowest_low + 0.618 * price_range,
                '100%': highest_high,
            }
            
            # En yakın Fibonacci seviyesini ve ihtimalleri hesapla
            closest_level = None
            min_diff = float('inf')
            turn_probability = 0
            rise_probability = 0
            fall_probability = 0
            for level, value in fibonacci_levels_raw.items():
                diff = abs(current_price - value)
                if diff < min_diff:
                    min_diff = diff
                    closest_level = level
                    distance_factor = max(0, 1 - (diff / (price_range * 0.5)))
                    turn_probability = 30 * distance_factor
                    rise_probability = 35
                    fall_probability = 35
                    
                    # Sinyallere göre ihtimalleri güncelle
                    if signal == "Golden Cross (Alım)":
                        rise_probability += 15 * distance_factor
                        fall_probability -= 15 * distance_factor
                    elif signal == "Death Cross (Satış)":
                        fall_probability += 15 * distance_factor
                        rise_probability -= 15 * distance_factor
                    
                    if stoch_signal == "Alım":
                        rise_probability += 10 * distance_factor
                        fall_probability -= 10 * distance_factor
                    elif stoch_signal == "Satış":
                        fall_probability += 10 * distance_factor
                        rise_probability -= 10 * distance_factor
                    
                    if adx_signal == "Güçlü Yükseliş":
                        rise_probability += 10 * distance_factor
                    elif adx_signal == "Güçlü Düşüş":
                        fall_probability += 10 * distance_factor
                    
                    if rsi is not None:
                        if rsi < 30:
                            rise_probability += 10 * distance_factor
                            fall_probability -= 10 * distance_factor
                        elif rsi > 70:
                            fall_probability += 10 * distance_factor
                            rise_probability -= 10 * distance_factor
                    
                    # İhtimalleri normalize et
                    total = turn_probability + rise_probability + fall_probability
                    if total > 0:
                        turn_probability = round((turn_probability / total) * 100)
                        rise_probability = round((rise_probability / total) * 100)
                        fall_probability = round((fall_probability / total) * 100)
                    else:
                        turn_probability = 33
                        rise_probability = 33
                        fall_probability = 34
            
            # Verileri sözlüğe ekle
            price_data[key] = {
                'current_price': current_price,
                'sma_50': sma_50_rounded,
                'sma_200': sma_200_rounded,
                'signal': signal,
                'stoch_k': stoch_k if stoch_k is not None else 'Veri Yok',
                'stoch_d': stoch_d if stoch_d is not None else 'Veri Yok',
                'stoch_signal': stoch_signal,
                'adx': adx if adx else 'Veri Yok',
                'adx_signal': adx_signal,
                'rsi': rsi if rsi is not None else 'Veri Yok',
                'rsi_signal': rsi_signal,
                'closest_fibonacci_level': closest_level,
                'turn_probability': turn_probability,
                'rise_probability': rise_probability,
                'fall_probability': fall_probability
            }
        
        # Şablona verileri gönder
        return render(request, 'trading_pairs.html', {'price_data': price_data})
    
    except Exception as e:
        print(f"Hata oluştu: {e}")
        return render(request, 'error.html', {'error': str(e)})
        
def pair_detail(request, pair):
    try:
        base, quote = pair.split('/')
        timeframe = request.GET.get('timeframe', 'day')  # URL'den zaman dilimini al
        limits = {'hour': 24, '4hour': 48, 'day': 200, 'week': 52}  # Zaman dilimine göre limit
        limit = limits.get(timeframe, 200)
        historical_prices = get_historical_prices(base, quote, timeframe, limit)
        if not historical_prices:
            return render(request, 'error.html', {'error': f"{pair} için veri bulunamadı."})
        
        current_price = get_current_prices([TradingPair(base_currency=base, quote_currency=quote)]).get(pair, 'Bilinmeyen')
        if current_price == 'Bilinmeyen':
            current_price = float(historical_prices[-1]['close'])
        else:
            current_price = float(current_price)
        
        sma_50 = calculate_sma(historical_prices, min(50, len(historical_prices)))
        sma_200 = calculate_sma(historical_prices, min(200, len(historical_prices)))
        stoch_k, stoch_d = calculate_stochastic(historical_prices)
        adx = calculate_adx(historical_prices)
        rsi = calculate_rsi(historical_prices)
        
        if len(historical_prices) >= 7:
            price_change_7d = ((historical_prices[-1]['close'] - historical_prices[-7]['close']) / historical_prices[-7]['close']) * 100
        else:
            price_change_7d = None

        # Fibonacci Seviyeleri
        highest_high = max(price['high'] for price in historical_prices)
        lowest_low = min(price['low'] for price in historical_prices)
        price_range = highest_high - lowest_low
        fibonacci_levels_raw = {
            '0%': lowest_low,
            '23.6%': lowest_low + 0.236 * price_range,
            '38.2%': lowest_low + 0.382 * price_range,
            '50%': lowest_low + 0.5 * price_range,
            '61.8%': lowest_low + 0.618 * price_range,
            '100%': highest_high,
        }

        sma_signal = "Belirsiz"
        if sma_50 and sma_200:
            if sma_50 > sma_200:
                sma_signal = "Golden Cross (Alım)"
            elif sma_50 < sma_200:
                sma_signal = "Death Cross (Satış)"

        stoch_signal = "Nötr"
        if stoch_k is not None and stoch_d is not None:
            if stoch_k > stoch_d and stoch_k < 20:
                stoch_signal = "Alım"
            elif stoch_k < stoch_d and stoch_k > 80:
                stoch_signal = "Satış"

        adx_signal = "Zayıf Trend"
        if adx and adx > 25:
            adx_signal = "Güçlü Trend"

        fibonacci_levels = {}
        closest_level = None
        min_diff = float('inf')
        for level, value in fibonacci_levels_raw.items():
            diff = abs(current_price - value)
            if diff < min_diff:
                min_diff = diff
                closest_level = level
            
            distance_factor = max(0, 1 - (diff / (price_range * 0.5)))
            turn_probability = 30 * distance_factor
            rise_probability = 35
            fall_probability = 35

            if sma_signal == "Golden Cross (Alım)":
                rise_probability += 15 * distance_factor
                fall_probability -= 15 * distance_factor
            elif sma_signal == "Death Cross (Satış)":
                fall_probability += 15 * distance_factor
                rise_probability -= 15 * distance_factor

            if stoch_signal == "Alım":
                rise_probability += 10 * distance_factor
                fall_probability -= 10 * distance_factor
            elif stoch_signal == "Satış":
                fall_probability += 10 * distance_factor
                rise_probability -= 10 * distance_factor

            if adx_signal == "Güçlü Trend":
                if current_price > value:
                    rise_probability += 10 * distance_factor
                else:
                    fall_probability += 10 * distance_factor

            if rsi is not None:
                if rsi < 30:
                    rise_probability += 10 * distance_factor
                    fall_probability -= 10 * distance_factor
                elif rsi > 70:
                    fall_probability += 10 * distance_factor
                    rise_probability -= 10 * distance_factor

            total = turn_probability + rise_probability + fall_probability
            if total > 0:
                turn_probability = round((turn_probability / total) * 100)
                rise_probability = round((rise_probability / total) * 100)
                fall_probability = round((fall_probability / total) * 100)
            else:
                turn_probability = 33
                rise_probability = 33
                fall_probability = 34

            fibonacci_levels[level] = {
                'value': round(value, 2),
                'turn_probability': turn_probability,
                'rise_probability': rise_probability,
                'fall_probability': fall_probability
            }

        context = {
            'pair': pair,
            'current_price': current_price,
            'sma_50': round(sma_50, 2) if sma_50 else 'Veri Yok',
            'sma_200': round(sma_200, 2) if sma_200 else 'Veri Yok',
            'stoch_k': stoch_k if stoch_k is not None else 'Veri Yok',
            'stoch_d': stoch_d if stoch_d is not None else 'Veri Yok',
            'adx': adx if adx else 'Veri Yok',
            'rsi': rsi if rsi is not None else 'Veri Yok',
            'price_change_7d': round(price_change_7d, 2) if price_change_7d is not None else 'Veri Yok',
            'historical_prices': historical_prices,
            'fibonacci_levels': fibonacci_levels,
            'closest_level': closest_level,
            'timeframe': timeframe
        }
        return render(request, 'pair_detail.html', context)
    except Exception as e:
        print(f"Hata oluştu: {e}")
        return render(request, 'error.html', {'error': str(e)})

def get_prices_json(request):
    pairs = TradingPair.objects.all()
    prices = get_current_prices(pairs)
    return JsonResponse(prices)